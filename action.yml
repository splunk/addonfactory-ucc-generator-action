#   ########################################################################
#   Copyright 2021 Splunk Inc.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#   ########################################################################
# action.yml
name: "Addon Factory UCC Framework package generator"
description: "Produce splunk package"
inputs:
  version:
    description: Version stamp for output
    required: true
outputs:
  OUTPUT:
    description: "Package produced from the build"
    value: ${{ steps.output.outputs.result }}
runs:
  using: "composite"
  steps:
    - shell: bash
      run: |
        if [ -f "Pipfile.lock" ]
        then
          mkdir -p package/lib || true
          pip install pipenv
          pipenv lock -r > package/lib/requirements.txt
          pipenv lock -d -r > requirements_dev.txt
        fi
    - shell: bash
      run: |
        if [ -f "poetry.lock" ]
        then
          pip install poetry
          if [ -f "globalConfig.json" ]
          then
            echo " globalConfig.json found, creating package/lib and exporting poetry dependencies "
            mkdir -p package/lib || true
            poetry export --without-hashes -o package/lib/requirements.txt
          fi
          poetry export --without-hashes --dev -o requirements_dev.txt
          if [ ! -z $INPUT_VERSION ]
          then
            poetry version $INPUT_VERSION
          fi
        fi
    - shell: bash
      run: pip install -r requirements_dev.txt
    - run: |
        if [ ! -z $INPUT_VERSION ]; then ARG_VERSION="--ta-version=${INPUT_VERSION}"; fi
        echo "::set-output name=result::$(echo $ARG_VERSION)"
        echo running ucc-gen $ARG_VERSION
        ucc-gen $ARG_VERSION
      shell: bash
      env:
        INPUT_VERSION: ${{ inputs.version }}
    - run: |
        if [ -f package.json ]
        then
          yarn
          if [ ! -z $INPUT_VERSION ]
          then
            yarn version --new-version $INPUT_VERSION --no-git-tag-version
          fi
          yarn run build
        fi
      shell: bash
    - run: chmod -R +r output
      shell: bash
    - run: chmod -R go-w output
      shell: bash
    - id: output
      shell: bash
      run: |
        OUTPUT=output/$(ls output/)
        SOURCE_REGEX='^.*/$'
        if [[ $OUTPUT =~ $SOURCE_REGEX ]];
        then
            echo Removing trailing / from OUTPUT slim is picky
            OUTPUT=$(echo $OUTPUT | sed 's/\(.*\)\//\1/')
        fi
        echo "::set-output name=result::$(echo $OUTPUT)"
